import { obtenerRese√±as } from "../rese√±aService";
import maplibregl from "maplibre-gl";

export const cargarRese√±asEnMapa = async (map, setRese√±aActiva, filtros = {}, marcadoresRef) => {
  try {
    console.log("üîç Cargando rese√±as con filtros:", filtros);
    
    if (!filtros) filtros = {};
    
    const rese√±as = await obtenerRese√±as();
    console.log(`üìä Total rese√±as obtenidas: ${rese√±as.length}`);

    // ‚ú® APLICAR filtros con mejor logging
    const filtradas = rese√±as.filter((r) => {
      const proveedorMatch = !filtros.proveedor || r.proveedor_id === filtros.proveedor;
      const zonaMatch = !filtros.zona || r.proveedores?.zona_id === filtros.zona;
      const tecnologiaMatch = !filtros.tecnologia || r.proveedores?.tecnologia === filtros.tecnologia;
      const valoracionMatch = r.estrellas >= (filtros.valoracionMin || 0);
      
      const cumple = proveedorMatch && zonaMatch && tecnologiaMatch && valoracionMatch;
      
      // ‚ú® DEBUG: Log para rese√±as que no cumplen filtros
      if (!cumple) {
        console.log(`‚ùå Rese√±a ${r.id} no cumple filtros:`, {
          proveedor: proveedorMatch,
          zona: zonaMatch,
          tecnologia: tecnologiaMatch,
          valoracion: valoracionMatch
        });
      }
      
      return cumple;
    });

    console.log(`‚úÖ Rese√±as filtradas: ${filtradas.length}`);

    // ‚ú® CREAR/MOSTRAR marcadores para rese√±as filtradas
    filtradas.forEach((r) => {
      let marcadorExistente = marcadoresRef.current.find((m) => m.rese√±a.id === r.id);
      
      if (marcadorExistente) {
        // ‚ú® MOSTRAR marcador existente
        console.log(`üëÅÔ∏è Mostrando marcador existente para rese√±a ${r.id}`);
        marcadorExistente.element.style.opacity = "1";
        marcadorExistente.element.style.pointerEvents = "auto";
        marcadorExistente.element.style.display = "block";
      } else {
        // ‚ú® CREAR nuevo marcador
        const coords = r.proveedores?.zonas?.geom?.coordinates?.flat(2);
        if (!Array.isArray(coords) || coords.length < 2) {
          console.warn(`‚ö†Ô∏è Coordenadas inv√°lidas para rese√±a ${r.id}`);
          return;
        }

        const [lng, lat] = coords;
        
        // ‚ú® VALIDAR coordenadas
        if (isNaN(lng) || isNaN(lat)) {
          console.warn(`‚ö†Ô∏è Coordenadas NaN para rese√±a ${r.id}:`, { lng, lat });
          return;
        }

        console.log(`‚ûï Creando nuevo marcador para rese√±a ${r.id} en [${lng}, ${lat}]`);

        const markerEl = document.createElement("div");
        markerEl.className = `
          w-4 h-4 bg-[#FB8531] rounded-full border border-white shadow-md 
          opacity-0 hover:shadow-xl hover:ring-2 hover:ring-white/40 
          cursor-pointer
        `.replace(/\s+/g, ' ').trim();

        // ‚ú® AGREGAR data attribute para debugging
        markerEl.setAttribute('data-rese√±a-id', r.id);

        markerEl.addEventListener("click", (e) => {
          e.stopPropagation();
          console.log(`üñ±Ô∏è Click en rese√±a ${r.id}`);
          setRese√±aActiva(r);
        });

        const marker = new maplibregl.Marker({
          element: markerEl,
          anchor: "center",
        })
          .setLngLat([lng, lat])
          .addTo(map);

        // ‚ú® ANIMACI√ìN de aparici√≥n
        setTimeout(() => {
          markerEl.classList.remove("opacity-0");
          markerEl.classList.add("opacity-100");
        }, 10);

        // ‚ú® GUARDAR referencia con m√°s informaci√≥n
        marcadoresRef.current.push({ 
          marker, 
          element: markerEl, 
          rese√±a: r,
          coords: [lng, lat],
          visible: true
        });
      }
    });

    // ‚ú® OCULTAR marcadores que NO cumplen el filtro
    let ocultados = 0;
    let mostrados = 0;

    marcadoresRef.current.forEach(({ rese√±a, element, marker }) => {
      const cumpleFiltro = filtradas.find((r) => r.id === rese√±a.id);
      
      if (cumpleFiltro) {
        // ‚ú® MOSTRAR
        element.style.opacity = "1";
        element.style.pointerEvents = "auto";
        element.style.display = "block";
        mostrados++;
      } else {
        // ‚ú® OCULTAR (pero NO remover)
        element.style.opacity = "0";
        element.style.pointerEvents = "none";
        element.style.display = "none";
        ocultados++;
      }
    });

    console.log(`üëÅÔ∏è Marcadores mostrados: ${mostrados}, ocultados: ${ocultados}`);

  } catch (error) {
    console.error("‚ùå Error en cargarRese√±asEnMapa:", error);
    throw error;
  }
};

// ‚ú® FUNCI√ìN para limpiar marcadores completamente
export const limpiarMarcadoresRese√±as = (marcadoresRef) => {
  if (!marcadoresRef.current) return;
  
  console.log(`üßπ Limpiando ${marcadoresRef.current.length} marcadores`);
  
  marcadoresRef.current.forEach(({ marker, element }) => {
    try {
      if (marker && marker.remove) {
        marker.remove();
      }
      if (element && element.parentNode) {
        element.parentNode.removeChild(element);
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Error limpiando marcador:", error);
    }
  });
  
  marcadoresRef.current = [];
  console.log("‚úÖ Marcadores limpiados");
};

// ‚ú® NUEVA FUNCI√ìN: Actualizar visibilidad sin recargar
export const actualizarVisibilidadRese√±as = (filtros, marcadoresRef) => {
  if (!marcadoresRef.current || marcadoresRef.current.length === 0) {
    console.log("‚ÑπÔ∏è No hay marcadores para actualizar");
    return;
  }

  console.log("üîÑ Actualizando visibilidad de marcadores con filtros:", filtros);

  let mostrados = 0;
  let ocultados = 0;

  marcadoresRef.current.forEach(({ rese√±a, element }) => {
    // ‚ú® APLICAR filtros
    const proveedorMatch = !filtros.proveedor || rese√±a.proveedor_id === filtros.proveedor;
    const zonaMatch = !filtros.zona || rese√±a.proveedores?.zona_id === filtros.zona;
    const tecnologiaMatch = !filtros.tecnologia || rese√±a.proveedores?.tecnologia === filtros.tecnologia;
    const valoracionMatch = rese√±a.estrellas >= (filtros.valoracionMin || 0);
    
    const cumpleFiltro = proveedorMatch && zonaMatch && tecnologiaMatch && valoracionMatch;

    if (cumpleFiltro) {
      element.style.opacity = "1";
      element.style.pointerEvents = "auto";
      element.style.display = "block";
      mostrados++;
    } else {
      element.style.opacity = "0";
      element.style.pointerEvents = "none";
      element.style.display = "none";
      ocultados++;
    }
  });

  console.log(`üëÅÔ∏è Visibilidad actualizada - Mostrados: ${mostrados}, Ocultados: ${ocultados}`);
};
